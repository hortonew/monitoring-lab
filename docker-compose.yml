version: '3.8'
services:
  influxdb2:
    build:
      context: ./configurations/influxdb
      dockerfile: Dockerfile
    container_name: influxdb
    ports:
      - "8086:8086"
    volumes:
      - influxdb2-data:/var/lib/influxdb2
      - influxdb2-config:/etc/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=admin123456
      - DOCKER_INFLUXDB_INIT_ORG=sre
      - DOCKER_INFLUXDB_INIT_BUCKET=cdm
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=AnInsecureTokenYouShouldProbablyChangeThis

  telegraf:
    image: telegraf:latest
    container_name: telegraf
    volumes:
    # telegraf config /etc/telegraf/telegraf.conf -test
    - ./configurations/telegraf/etc/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      - influxdb2

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - influxdb2
    ports:
      - '127.0.0.1:3000:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configurations/grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123456
      - GF_INSTALL_PLUGINS=grafana-clock-panel
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning

  rust-weather-app:
    container_name: rust-weather-app
    build:
      context: ./apps/rust-weather-app
      dockerfile: Dockerfile
    depends_on:
      - influxdb2
      - unleashweb

  vault:
    image: hashicorp/vault:latest
    container_name: vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "root"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    cap_add:
      - IPC_LOCK
    restart: unless-stopped
    command: "server -dev"

  go-load-test-vault:
    container_name: go-load-test-vault
    build:
      context: ./apps/vault-load-test
      dockerfile: Dockerfile
    depends_on:
      - influxdb2
      - vault
      - unleashweb

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./configurations/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - influxdb2
      - vault
      - telegraf
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  blackbox_exporter:
    image: prom/blackbox-exporter:latest
    container_name: blackbox_exporter
    ports:
      - "9115:9115"
    volumes:
      - ./configurations/blackbox_exporter/config.yml:/config/blackbox.yml
    command:
      - '--config.file=/config/blackbox.yml'

  postgres_exporter_unleashdb:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    container_name: postgres_exporter_unleashdb
    environment:
      DATA_SOURCE_NAME: "postgres://postgres:unleash@unleashdb/db?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - unleashdb
    restart: unless-stopped
    command:
      - '--config.file=/config/postgres_exporter.yml'
    volumes:
      - ./configurations/postgres_exporter/config.yml:/config/postgres_exporter.yml

  # feature flags
  unleashweb:
    image: unleashorg/unleash-server:latest
    ports:
      - "4242:4242"
    environment:
      DATABASE_URL: "postgres://postgres:unleash@unleashdb/db"
      DATABASE_SSL: "false"
      LOG_LEVEL: "warn"
      INIT_FRONTEND_API_TOKENS: "default:development.unleash-insecure-frontend-api-token"
      INIT_CLIENT_API_TOKENS: "default:development.unleash-insecure-api-token"
      UNLEASH_DEFAULT_ADMIN_USERNAME: "admin"
      UNLEASH_DEFAULT_ADMIN_PASSWORD: "admin123456"
    depends_on:
      unleashdb:
        condition: service_healthy
    command: [ "node", "index.js" ]
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:4242/health || exit 1
      interval: 1s
      timeout: 1m
      retries: 5
      start_period: 15s
  unleashdb:
    expose:
      - "5432"
    image: postgres:15
    environment:
      POSTGRES_DB: "db"
      POSTGRES_HOST_AUTH_METHOD: "trust"
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--username=postgres",
          "--host=127.0.0.1",
          "--port=5432"
        ]
      interval: 2s
      timeout: 1m
      retries: 5
      start_period: 10s

volumes:
  influxdb2-data:
  influxdb2-config:
  grafana_data: {}
  prometheus_data: {}

